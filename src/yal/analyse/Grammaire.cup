package yal.analyse ;

import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.instructions.* ;
import yal.arbre.operations.* ;
import yal.tds.* ;
import yal.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, LIRE, ENTIER, AFFECT, SI, ALORS, SINON, FINSI,
                   TANTQUE, REPETER, FINTANTQUE, ADDITION, SOUSTRACTION, MULTIPLICATION, DIVISION, NON, INFERIEUR,
                   SUPERIEUR, PARENTHESEGAUCHE, PARENTHESEDROITE, EGAL, DIFFERENT, ET, OU ;
terminal String    IDF, CSTENTIERE ;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, INST, LDECL, DECL ;
non terminal Expression EXP ;
non terminal Operation OPER ;

precedence left ET, OU ;
precedence left EGAL, DIFFERENT ;
precedence left INFERIEUR, SUPERIEUR ;
precedence left ADDITION, SOUSTRACTION ;
precedence left MULTIPLICATION, DIVISION ;
precedence left NON ;
precedence left PARENTHESEGAUCHE, PARENTHESEDROITE ;


/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     PROGRAMME  IDF  DEBUT  LDECL:ld  LINST:li  FIN
                {: RESULT = li ; :}
        |
                PROGRAMME IDF DEBUT LINST:li FIN
                {: RESULT = li ; :}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(new IDF(i, ileft + 1), ileft + 1) ; :}
        |
                IDF:i AFFECT EXP:e POINTVIRGULE
                {: RESULT = new Affect(new IDF(i, ileft + 1), e, ileft + 1) ; :}
        |
                SI EXP:e ALORS LINST:li FINSI
                {: RESULT = new Si(e, li, null, eleft + 1) ; :}
        |
                SI EXP:e ALORS LINST:li1 SINON LINST:li2 FINSI
                {: RESULT = new Si(e, li1, li2, eleft + 1) ; :}
        |
                TANTQUE EXP:e REPETER LINST:li FINTANTQUE
                {: RESULT = new TantQue(e, li, eleft + 1) ; :}
                ;
    
EXP    ::=      CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
                IDF:i
                {: RESULT = new IDF(i, ileft + 1) ; :}
        |
                SOUSTRACTION EXP:e
                {: RESULT = new ExpressionNegative(e, eleft + 1) ; :}
        |
                NON EXP:e
                {: RESULT = new ExpressionNon(e, eleft + 1) ; :}
        |
                EXP:e1 OPER:o EXP:e2
                {: RESULT = new OperationBinaire(e1, o, e2, e1left + 1) ; :}
        |
                PARENTHESEGAUCHE EXP:e PARENTHESEDROITE
                {: RESULT = new ExpressionParenthese(e, eleft + 1) ; :}
                ;

LDECL   ::=     LDECL:ld  DECL:d
                {: ((BlocDInstructions)ld).ajouter(d) ;
                   RESULT = ld ; :}
        |
                DECL:d
                {: BlocDInstructions b = new BlocDInstructions(dleft + 1) ;
                   b.ajouter(d) ;
                   RESULT = b ; :}
                ;

DECL   ::=      ENTIER IDF:i POINTVIRGULE
                {: TDS.getInstance().ajouter(new Variable(i), new Symbole(TDS.getInstance().getTailleZoneVariable()), ileft + 1) ; :}
                ;

OPER   ::=      ADDITION:a
                {: RESULT = new Addition(aleft + 1) ; :}
       |
                SOUSTRACTION:s
                {: RESULT = new Soustraction(sleft + 1) ; :}
       |
                MULTIPLICATION:m
                {: RESULT = new Multiplication(mleft + 1) ; :}
       |
                DIVISION:d
                {: RESULT = new Division(dleft + 1) ; :}
       |
                INFERIEUR:i
                {: RESULT = new Inferieur(ileft + 1) ; :}
       |
                SUPERIEUR:s
                {: RESULT = new Superieur(sleft + 1) ; :}
       |
                EGAL:e
                {: RESULT = new Egal(eleft + 1) ; :}
       |
                DIFFERENT:d
                {: RESULT = new Different(dleft + 1) ; :}
       |
                ET:e
                {: RESULT = new Et(eleft + 1) ; :}
       |
                OU:o
                {: RESULT = new Ou(oleft + 1) ; :}
                ;